#define logMessage printf
#define MQTTCLIENT_QOS2 1
#include "Sht31.h"
#include "mbed.h"
#include "easy-connect.h"
#include "MQTTNetwork.h"
#include "MQTTmbed.h"
#include "MQTTClient.h"

int arrivedcount = 0;

float sample_sensor_value = 28.7;
float simple_sensor_value = 20.1;


void messageArrivedTemp (MQTT: MessageData& md)
{
MQTT: Message&message = md. message;
logMessage ("Message arrived: qos %d, retained %d, dup %d, packetid %d\r\n", message.qos, message. retained, message.dup, message.id);
logMessage ("Temperature: %.1f C \r\n", sample_sensor_value);
    ++arrivedcount;

}

void messageArrivedHum (MQTT: MessageData& md)
{
MQTT: Message&message = md. message;
logMessage ("Message arrived: qos %d, retained %d, dup %d, packetid %d\r\n", message.qos, message. retained, message.dup, message.id);
logMessage ("Humidity: %.1f %% \r\n", simple_sensor_value);
    ++arrivedcount;

}


int main (int argc, char* argv [])
{
    // MQTT broker hostname
    const char* HOST = "broker.emqx.io";
    // MQTT broker port
    const int PORT = 1883;


    // MQTT topics for temperature & humidity
    const char* TEMPERATURE_TOPIC = "sht31/sensor/temperature";
    const char* HUMIDITY_TOPIC = "sht31/sensor/humidity";

logMessage ("Hello MQTT Client");

    NetworkInterface* network = easy_connect(true);
    if (! network) {
        return -1;
    }

    MQTTNetwork mqttNetwork(network);

MQTT: Client<MQTTNetwork, Countdown> client(mqttNetwork);

logMessage ("Connecting to %s: %d\r\n", HOST, PORT);
    int rc = mqttNetwork.connect(HOST, PORT);
    if (rc! = 0)
logMessage ("rc from TCP connect is %d\r\n", rc);

    MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
data. MQTTVersion = 3;

    // MQTT unique client id. Update this
data. clientID.cstring = "temp";
    // MQTT user credentials. Update this
data. username. cstring = "vasilis1";
data. password. cstring = "vasilis1";

    if ((rc = client. connect(data))! = 0)
logMessage ("rc from MQTT connect is %d\r\n", rc);

    if ((rc = client. subscribe (TEMPERATURE_TOPIC, MQTT: QOS1, messageArrivedTemp)))
        if (rc! = 0) 
printf ("Failed to subscribe to MQTT topic. Return code: %d\n", rc);

    if ((rc = client. subscribe (HUMIDITY_TOPIC, MQTT: QOS0, messageArrivedHum)! = 0)
logMessage ("rc from MQTT subscribe is %d\r\n", rc);  
        if (rc! = 0) 
printf ("Failed to subscribe to MQTT topic. Return code: %d\n", rc);

        while (true) {
client. yield (1000); // Adjust the delay as needed
    }


logMessage ("Arrived %d msgs\r\n", arrivedcount);

    return 0;
}
